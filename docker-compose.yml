services:
  web:
    build:
      context: .
      dockerfile: deployments/compose/django/Dockerfile
    command: /start
    restart: always
    env_file:
      - .env
    volumes:
      - .:/app:cached
    ports:
      - "${PORT:-8001}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - backend

  db:
    image: postgres:16-alpine
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  redis:
    image: redis:7-alpine
    restart: always
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    networks:
      - backend


  celery_worker:
    build:
      context: .
      dockerfile: deployments/compose/django/Dockerfile
    command: /start-celeryworker
    restart: always
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_started
    networks:
      - backend

volumes:
  pg_data:
  redis_data:

networks:
  backend:
    driver: bridge
